'use strict';

describe('VideoList', function () {
  var createRenderer = React.addons.TestUtils.createRenderer;

  // When testing a React component that renders other nested components,
  // it's a common practice to "shallow render" the component, or render
  // only a single level deep. This isolates the component from it's children
  // See more: https://facebook.github.io/react/docs/test-utils.html#shallow-rendering

  it('should be a stateless functional component', function () {
    expect(React.Component.isPrototypeOf(VideoList)).to.be.false;
  });

  it('should render one `VideoListEntry` when given one video', function () {
    var shallowRenderer = createRenderer();

    var oneFakeVideo = window.fakeVideoData.slice(-1);
    shallowRenderer.render(React.createElement(VideoList, { videos: oneFakeVideo }));

    var videoList = shallowRenderer.getRenderOutput();
    expect(videoList.props.children).to.have.length(1);
    videoList.props.children.forEach(function (child) {
      return expect(child.type).to.equal(VideoListEntry);
    });
  });

  it('should render three `VideoListEntry` when given three videos', function () {
    var shallowRenderer = createRenderer();

    var threeFakeVideos = window.fakeVideoData.slice(-3);
    shallowRenderer.render(React.createElement(VideoList, { videos: threeFakeVideos }));

    var videoList = shallowRenderer.getRenderOutput();
    expect(videoList.props.children).to.have.length(3);
    videoList.props.children.forEach(function (child) {
      return expect(child.type).to.equal(VideoListEntry);
    });
  });

  it('should render five `VideoListEntry` when given five videos', function () {
    var shallowRenderer = createRenderer();

    var fiveFakeVideos = window.fakeVideoData.slice(-5);
    shallowRenderer.render(React.createElement(VideoList, { videos: fiveFakeVideos }));

    var videoList = shallowRenderer.getRenderOutput();
    expect(videoList.props.children).to.have.length(5);
    videoList.props.children.forEach(function (child) {
      return expect(child.type).to.equal(VideoListEntry);
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NwZWMvY29tcG9uZW50cy9WaWRlb0xpc3RTcGVjLmpzeCJdLCJuYW1lcyI6WyJkZXNjcmliZSIsImNyZWF0ZVJlbmRlcmVyIiwiUmVhY3QiLCJhZGRvbnMiLCJUZXN0VXRpbHMiLCJpdCIsImV4cGVjdCIsIkNvbXBvbmVudCIsImlzUHJvdG90eXBlT2YiLCJWaWRlb0xpc3QiLCJ0byIsImJlIiwiZmFsc2UiLCJzaGFsbG93UmVuZGVyZXIiLCJvbmVGYWtlVmlkZW8iLCJ3aW5kb3ciLCJmYWtlVmlkZW9EYXRhIiwic2xpY2UiLCJyZW5kZXIiLCJ2aWRlb0xpc3QiLCJnZXRSZW5kZXJPdXRwdXQiLCJwcm9wcyIsImNoaWxkcmVuIiwiaGF2ZSIsImxlbmd0aCIsImZvckVhY2giLCJjaGlsZCIsInR5cGUiLCJlcXVhbCIsIlZpZGVvTGlzdEVudHJ5IiwidGhyZWVGYWtlVmlkZW9zIiwiZml2ZUZha2VWaWRlb3MiXSwibWFwcGluZ3MiOiI7O0FBQUFBLFNBQVMsV0FBVCxFQUFzQixZQUFXO0FBQUEsTUFDekJDLGNBRHlCLEdBQ05DLE1BQU1DLE1BQU4sQ0FBYUMsU0FEUCxDQUN6QkgsY0FEeUI7O0FBRy9CO0FBQ0E7QUFDQTtBQUNBOztBQUVBSSxLQUFHLDRDQUFILEVBQWlELFlBQVc7QUFDMURDLFdBQU9KLE1BQU1LLFNBQU4sQ0FBZ0JDLGFBQWhCLENBQThCQyxTQUE5QixDQUFQLEVBQWlEQyxFQUFqRCxDQUFvREMsRUFBcEQsQ0FBdURDLEtBQXZEO0FBQ0QsR0FGRDs7QUFJQVAsS0FBRyx5REFBSCxFQUE4RCxZQUFXO0FBQ3ZFLFFBQUlRLGtCQUFrQlosZ0JBQXRCOztBQUVBLFFBQUlhLGVBQWVDLE9BQU9DLGFBQVAsQ0FBcUJDLEtBQXJCLENBQTJCLENBQUMsQ0FBNUIsQ0FBbkI7QUFDQUosb0JBQWdCSyxNQUFoQixDQUNFLG9CQUFDLFNBQUQsSUFBVyxRQUFRSixZQUFuQixHQURGOztBQUlBLFFBQUlLLFlBQVlOLGdCQUFnQk8sZUFBaEIsRUFBaEI7QUFDQWQsV0FBT2EsVUFBVUUsS0FBVixDQUFnQkMsUUFBdkIsRUFBaUNaLEVBQWpDLENBQW9DYSxJQUFwQyxDQUF5Q0MsTUFBekMsQ0FBZ0QsQ0FBaEQ7QUFDQUwsY0FBVUUsS0FBVixDQUFnQkMsUUFBaEIsQ0FBeUJHLE9BQXpCLENBQWlDO0FBQUEsYUFBU25CLE9BQU9vQixNQUFNQyxJQUFiLEVBQW1CakIsRUFBbkIsQ0FBc0JrQixLQUF0QixDQUE0QkMsY0FBNUIsQ0FBVDtBQUFBLEtBQWpDO0FBQ0QsR0FYRDs7QUFhQXhCLEtBQUcsOERBQUgsRUFBbUUsWUFBVztBQUM1RSxRQUFJUSxrQkFBa0JaLGdCQUF0Qjs7QUFFQSxRQUFJNkIsa0JBQWtCZixPQUFPQyxhQUFQLENBQXFCQyxLQUFyQixDQUEyQixDQUFDLENBQTVCLENBQXRCO0FBQ0FKLG9CQUFnQkssTUFBaEIsQ0FDRSxvQkFBQyxTQUFELElBQVcsUUFBUVksZUFBbkIsR0FERjs7QUFJQSxRQUFJWCxZQUFZTixnQkFBZ0JPLGVBQWhCLEVBQWhCO0FBQ0FkLFdBQU9hLFVBQVVFLEtBQVYsQ0FBZ0JDLFFBQXZCLEVBQWlDWixFQUFqQyxDQUFvQ2EsSUFBcEMsQ0FBeUNDLE1BQXpDLENBQWdELENBQWhEO0FBQ0FMLGNBQVVFLEtBQVYsQ0FBZ0JDLFFBQWhCLENBQXlCRyxPQUF6QixDQUFpQztBQUFBLGFBQVNuQixPQUFPb0IsTUFBTUMsSUFBYixFQUFtQmpCLEVBQW5CLENBQXNCa0IsS0FBdEIsQ0FBNEJDLGNBQTVCLENBQVQ7QUFBQSxLQUFqQztBQUNELEdBWEQ7O0FBYUF4QixLQUFHLDREQUFILEVBQWlFLFlBQVc7QUFDMUUsUUFBSVEsa0JBQWtCWixnQkFBdEI7O0FBRUEsUUFBSThCLGlCQUFpQmhCLE9BQU9DLGFBQVAsQ0FBcUJDLEtBQXJCLENBQTJCLENBQUMsQ0FBNUIsQ0FBckI7QUFDQUosb0JBQWdCSyxNQUFoQixDQUNFLG9CQUFDLFNBQUQsSUFBVyxRQUFRYSxjQUFuQixHQURGOztBQUlBLFFBQUlaLFlBQVlOLGdCQUFnQk8sZUFBaEIsRUFBaEI7QUFDQWQsV0FBT2EsVUFBVUUsS0FBVixDQUFnQkMsUUFBdkIsRUFBaUNaLEVBQWpDLENBQW9DYSxJQUFwQyxDQUF5Q0MsTUFBekMsQ0FBZ0QsQ0FBaEQ7QUFDQUwsY0FBVUUsS0FBVixDQUFnQkMsUUFBaEIsQ0FBeUJHLE9BQXpCLENBQWlDO0FBQUEsYUFBU25CLE9BQU9vQixNQUFNQyxJQUFiLEVBQW1CakIsRUFBbkIsQ0FBc0JrQixLQUF0QixDQUE0QkMsY0FBNUIsQ0FBVDtBQUFBLEtBQWpDO0FBQ0QsR0FYRDtBQVlELENBbEREIiwiZmlsZSI6IlZpZGVvTGlzdFNwZWMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJkZXNjcmliZSgnVmlkZW9MaXN0JywgZnVuY3Rpb24oKSB7XG4gIHZhciB7IGNyZWF0ZVJlbmRlcmVyIH0gPSBSZWFjdC5hZGRvbnMuVGVzdFV0aWxzO1xuXG4gIC8vIFdoZW4gdGVzdGluZyBhIFJlYWN0IGNvbXBvbmVudCB0aGF0IHJlbmRlcnMgb3RoZXIgbmVzdGVkIGNvbXBvbmVudHMsXG4gIC8vIGl0J3MgYSBjb21tb24gcHJhY3RpY2UgdG8gXCJzaGFsbG93IHJlbmRlclwiIHRoZSBjb21wb25lbnQsIG9yIHJlbmRlclxuICAvLyBvbmx5IGEgc2luZ2xlIGxldmVsIGRlZXAuIFRoaXMgaXNvbGF0ZXMgdGhlIGNvbXBvbmVudCBmcm9tIGl0J3MgY2hpbGRyZW5cbiAgLy8gU2VlIG1vcmU6IGh0dHBzOi8vZmFjZWJvb2suZ2l0aHViLmlvL3JlYWN0L2RvY3MvdGVzdC11dGlscy5odG1sI3NoYWxsb3ctcmVuZGVyaW5nXG5cbiAgaXQoJ3Nob3VsZCBiZSBhIHN0YXRlbGVzcyBmdW5jdGlvbmFsIGNvbXBvbmVudCcsIGZ1bmN0aW9uKCkge1xuICAgIGV4cGVjdChSZWFjdC5Db21wb25lbnQuaXNQcm90b3R5cGVPZihWaWRlb0xpc3QpKS50by5iZS5mYWxzZTtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCByZW5kZXIgb25lIGBWaWRlb0xpc3RFbnRyeWAgd2hlbiBnaXZlbiBvbmUgdmlkZW8nLCBmdW5jdGlvbigpIHtcbiAgICB2YXIgc2hhbGxvd1JlbmRlcmVyID0gY3JlYXRlUmVuZGVyZXIoKTtcblxuICAgIHZhciBvbmVGYWtlVmlkZW8gPSB3aW5kb3cuZmFrZVZpZGVvRGF0YS5zbGljZSgtMSk7XG4gICAgc2hhbGxvd1JlbmRlcmVyLnJlbmRlcihcbiAgICAgIDxWaWRlb0xpc3QgdmlkZW9zPXtvbmVGYWtlVmlkZW99IC8+XG4gICAgKTtcblxuICAgIHZhciB2aWRlb0xpc3QgPSBzaGFsbG93UmVuZGVyZXIuZ2V0UmVuZGVyT3V0cHV0KCk7XG4gICAgZXhwZWN0KHZpZGVvTGlzdC5wcm9wcy5jaGlsZHJlbikudG8uaGF2ZS5sZW5ndGgoMSk7XG4gICAgdmlkZW9MaXN0LnByb3BzLmNoaWxkcmVuLmZvckVhY2goY2hpbGQgPT4gZXhwZWN0KGNoaWxkLnR5cGUpLnRvLmVxdWFsKFZpZGVvTGlzdEVudHJ5KSk7XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgcmVuZGVyIHRocmVlIGBWaWRlb0xpc3RFbnRyeWAgd2hlbiBnaXZlbiB0aHJlZSB2aWRlb3MnLCBmdW5jdGlvbigpIHtcbiAgICB2YXIgc2hhbGxvd1JlbmRlcmVyID0gY3JlYXRlUmVuZGVyZXIoKTtcblxuICAgIHZhciB0aHJlZUZha2VWaWRlb3MgPSB3aW5kb3cuZmFrZVZpZGVvRGF0YS5zbGljZSgtMyk7XG4gICAgc2hhbGxvd1JlbmRlcmVyLnJlbmRlcihcbiAgICAgIDxWaWRlb0xpc3QgdmlkZW9zPXt0aHJlZUZha2VWaWRlb3N9IC8+XG4gICAgKTtcbiAgICBcbiAgICB2YXIgdmlkZW9MaXN0ID0gc2hhbGxvd1JlbmRlcmVyLmdldFJlbmRlck91dHB1dCgpO1xuICAgIGV4cGVjdCh2aWRlb0xpc3QucHJvcHMuY2hpbGRyZW4pLnRvLmhhdmUubGVuZ3RoKDMpO1xuICAgIHZpZGVvTGlzdC5wcm9wcy5jaGlsZHJlbi5mb3JFYWNoKGNoaWxkID0+IGV4cGVjdChjaGlsZC50eXBlKS50by5lcXVhbChWaWRlb0xpc3RFbnRyeSkpO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIHJlbmRlciBmaXZlIGBWaWRlb0xpc3RFbnRyeWAgd2hlbiBnaXZlbiBmaXZlIHZpZGVvcycsIGZ1bmN0aW9uKCkge1xuICAgIHZhciBzaGFsbG93UmVuZGVyZXIgPSBjcmVhdGVSZW5kZXJlcigpO1xuXG4gICAgdmFyIGZpdmVGYWtlVmlkZW9zID0gd2luZG93LmZha2VWaWRlb0RhdGEuc2xpY2UoLTUpO1xuICAgIHNoYWxsb3dSZW5kZXJlci5yZW5kZXIoXG4gICAgICA8VmlkZW9MaXN0IHZpZGVvcz17Zml2ZUZha2VWaWRlb3N9IC8+XG4gICAgKTtcbiAgICBcbiAgICB2YXIgdmlkZW9MaXN0ID0gc2hhbGxvd1JlbmRlcmVyLmdldFJlbmRlck91dHB1dCgpO1xuICAgIGV4cGVjdCh2aWRlb0xpc3QucHJvcHMuY2hpbGRyZW4pLnRvLmhhdmUubGVuZ3RoKDUpO1xuICAgIHZpZGVvTGlzdC5wcm9wcy5jaGlsZHJlbi5mb3JFYWNoKGNoaWxkID0+IGV4cGVjdChjaGlsZC50eXBlKS50by5lcXVhbChWaWRlb0xpc3RFbnRyeSkpO1xuICB9KTtcbn0pOyJdfQ==