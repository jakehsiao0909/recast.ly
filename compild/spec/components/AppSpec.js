'use strict';

describe('App', function () {
  var _React$addons$TestUti = React.addons.TestUtils,
      Simulate = _React$addons$TestUti.Simulate,
      renderIntoDocument = _React$addons$TestUti.renderIntoDocument,
      findRenderedDOMComponentWithClass = _React$addons$TestUti.findRenderedDOMComponentWithClass,
      scryRenderedDOMComponentsWithClass = _React$addons$TestUti.scryRenderedDOMComponentsWithClass;


  var app;

  beforeEach(function () {
    app = renderIntoDocument(React.createElement(App, { searchYouTube: function searchYouTube() {} }));
  });

  it('should be a stateful class component', function () {
    expect(React.Component.isPrototypeOf(App)).to.be.true;
  });

  it('should render a single VideoPlayer component', function () {
    var videoPlayer = findRenderedDOMComponentWithClass(app, 'video-player');
    expect(videoPlayer).to.exist;
  });

  it('should render a single VideoList component', function () {
    var videoList = findRenderedDOMComponentWithClass(app, 'video-list');
    expect(videoList).to.exist;
  });

  it('should update the video player when a video entry\'s title is clicked', function () {
    // This test will only works once `App` is refactored into a stateful class component
    // because `renderIntoDocument` does not work with stateless class components
    expect(React.Component.isPrototypeOf(App)).to.be.true;

    var videoEntryTitleElements = scryRenderedDOMComponentsWithClass(app, 'video-list-entry-title');

    videoEntryTitleElements.forEach(function (videoEntryTitle) {
      Simulate.click(videoEntryTitle);
      var player = findRenderedDOMComponentWithClass(app, 'video-player');
      var playerTitle = player.querySelector('.video-player-details h3');

      // This test assumes that if you can successfully update the video player's title,
      // you can also update the video and description
      expect(playerTitle.innerHTML).to.equal(videoEntryTitle.innerHTML);
    });
  });

  xdescribe('when rendering live data from YouTube', function () {
    var searchYouTubeStub;

    beforeEach(function () {
      searchYouTubeStub = sinon.stub();
      searchYouTubeStub.yields(window.fakeVideoData);
      app = renderIntoDocument(React.createElement(App, { searchYouTube: searchYouTubeStub }));
    });

    it('should call `searchYouTube` when app is initialized', function () {
      expect(searchYouTubeStub.called).to.be.true;
    });

    it('should load live data when app is initialized', function () {
      expect(searchYouTubeStub.called).to.be.true;

      var videoEntryTitleElements = scryRenderedDOMComponentsWithClass(app, 'video-list-entry-title');

      videoEntryTitleElements.forEach(function (videoEntryTitle, i) {
        return expect(videoEntryTitle.innerHTML).to.equal(fakeVideoData[i].snippet.title);
      });
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NwZWMvY29tcG9uZW50cy9BcHBTcGVjLmpzeCJdLCJuYW1lcyI6WyJkZXNjcmliZSIsIlJlYWN0IiwiYWRkb25zIiwiVGVzdFV0aWxzIiwiU2ltdWxhdGUiLCJyZW5kZXJJbnRvRG9jdW1lbnQiLCJmaW5kUmVuZGVyZWRET01Db21wb25lbnRXaXRoQ2xhc3MiLCJzY3J5UmVuZGVyZWRET01Db21wb25lbnRzV2l0aENsYXNzIiwiYXBwIiwiYmVmb3JlRWFjaCIsIml0IiwiZXhwZWN0IiwiQ29tcG9uZW50IiwiaXNQcm90b3R5cGVPZiIsIkFwcCIsInRvIiwiYmUiLCJ0cnVlIiwidmlkZW9QbGF5ZXIiLCJleGlzdCIsInZpZGVvTGlzdCIsInZpZGVvRW50cnlUaXRsZUVsZW1lbnRzIiwiZm9yRWFjaCIsInZpZGVvRW50cnlUaXRsZSIsImNsaWNrIiwicGxheWVyIiwicGxheWVyVGl0bGUiLCJxdWVyeVNlbGVjdG9yIiwiaW5uZXJIVE1MIiwiZXF1YWwiLCJ4ZGVzY3JpYmUiLCJzZWFyY2hZb3VUdWJlU3R1YiIsInNpbm9uIiwic3R1YiIsInlpZWxkcyIsIndpbmRvdyIsImZha2VWaWRlb0RhdGEiLCJjYWxsZWQiLCJpIiwic25pcHBldCIsInRpdGxlIl0sIm1hcHBpbmdzIjoiOztBQUFBQSxTQUFTLEtBQVQsRUFBZ0IsWUFBVztBQUFBLDhCQU1yQkMsTUFBTUMsTUFBTixDQUFhQyxTQU5RO0FBQUEsTUFFdkJDLFFBRnVCLHlCQUV2QkEsUUFGdUI7QUFBQSxNQUd2QkMsa0JBSHVCLHlCQUd2QkEsa0JBSHVCO0FBQUEsTUFJdkJDLGlDQUp1Qix5QkFJdkJBLGlDQUp1QjtBQUFBLE1BS3ZCQyxrQ0FMdUIseUJBS3ZCQSxrQ0FMdUI7OztBQVF6QixNQUFJQyxHQUFKOztBQUVBQyxhQUFXLFlBQVc7QUFDcEJELFVBQU1ILG1CQUNKLG9CQUFDLEdBQUQsSUFBSyxlQUFlLHlCQUFNLENBQUUsQ0FBNUIsR0FESSxDQUFOO0FBR0QsR0FKRDs7QUFNQUssS0FBRyxzQ0FBSCxFQUEyQyxZQUFXO0FBQ3BEQyxXQUFPVixNQUFNVyxTQUFOLENBQWdCQyxhQUFoQixDQUE4QkMsR0FBOUIsQ0FBUCxFQUEyQ0MsRUFBM0MsQ0FBOENDLEVBQTlDLENBQWlEQyxJQUFqRDtBQUNELEdBRkQ7O0FBSUFQLEtBQUcsOENBQUgsRUFBbUQsWUFBVztBQUM1RCxRQUFJUSxjQUFjWixrQ0FBa0NFLEdBQWxDLEVBQXVDLGNBQXZDLENBQWxCO0FBQ0FHLFdBQU9PLFdBQVAsRUFBb0JILEVBQXBCLENBQXVCSSxLQUF2QjtBQUNELEdBSEQ7O0FBS0FULEtBQUcsNENBQUgsRUFBaUQsWUFBVztBQUMxRCxRQUFJVSxZQUFZZCxrQ0FBa0NFLEdBQWxDLEVBQXVDLFlBQXZDLENBQWhCO0FBQ0FHLFdBQU9TLFNBQVAsRUFBa0JMLEVBQWxCLENBQXFCSSxLQUFyQjtBQUNELEdBSEQ7O0FBS0FULEtBQUcsdUVBQUgsRUFBNEUsWUFBVztBQUNyRjtBQUNBO0FBQ0FDLFdBQU9WLE1BQU1XLFNBQU4sQ0FBZ0JDLGFBQWhCLENBQThCQyxHQUE5QixDQUFQLEVBQTJDQyxFQUEzQyxDQUE4Q0MsRUFBOUMsQ0FBaURDLElBQWpEOztBQUVBLFFBQUlJLDBCQUEwQmQsbUNBQW1DQyxHQUFuQyxFQUF3Qyx3QkFBeEMsQ0FBOUI7O0FBRUFhLDRCQUF3QkMsT0FBeEIsQ0FBZ0MsVUFBQ0MsZUFBRCxFQUFxQjtBQUNuRG5CLGVBQVNvQixLQUFULENBQWVELGVBQWY7QUFDQSxVQUFJRSxTQUFTbkIsa0NBQWtDRSxHQUFsQyxFQUF1QyxjQUF2QyxDQUFiO0FBQ0EsVUFBSWtCLGNBQWNELE9BQU9FLGFBQVAsQ0FBcUIsMEJBQXJCLENBQWxCOztBQUVBO0FBQ0E7QUFDQWhCLGFBQU9lLFlBQVlFLFNBQW5CLEVBQThCYixFQUE5QixDQUFpQ2MsS0FBakMsQ0FBdUNOLGdCQUFnQkssU0FBdkQ7QUFDRCxLQVJEO0FBU0QsR0FoQkQ7O0FBa0JBRSxZQUFVLHVDQUFWLEVBQW1ELFlBQVc7QUFDNUQsUUFBSUMsaUJBQUo7O0FBRUF0QixlQUFXLFlBQVc7QUFDcEJzQiwwQkFBb0JDLE1BQU1DLElBQU4sRUFBcEI7QUFDQUYsd0JBQWtCRyxNQUFsQixDQUF5QkMsT0FBT0MsYUFBaEM7QUFDQTVCLFlBQU1ILG1CQUNKLG9CQUFDLEdBQUQsSUFBSyxlQUFlMEIsaUJBQXBCLEdBREksQ0FBTjtBQUdELEtBTkQ7O0FBUUFyQixPQUFHLHFEQUFILEVBQTBELFlBQVc7QUFDbkVDLGFBQU9vQixrQkFBa0JNLE1BQXpCLEVBQWlDdEIsRUFBakMsQ0FBb0NDLEVBQXBDLENBQXVDQyxJQUF2QztBQUNELEtBRkQ7O0FBSUFQLE9BQUcsK0NBQUgsRUFBb0QsWUFBVztBQUM3REMsYUFBT29CLGtCQUFrQk0sTUFBekIsRUFBaUN0QixFQUFqQyxDQUFvQ0MsRUFBcEMsQ0FBdUNDLElBQXZDOztBQUVBLFVBQUlJLDBCQUEwQmQsbUNBQW1DQyxHQUFuQyxFQUF3Qyx3QkFBeEMsQ0FBOUI7O0FBRUFhLDhCQUF3QkMsT0FBeEIsQ0FBZ0MsVUFBQ0MsZUFBRCxFQUFrQmUsQ0FBbEI7QUFBQSxlQUM5QjNCLE9BQU9ZLGdCQUFnQkssU0FBdkIsRUFBa0NiLEVBQWxDLENBQXFDYyxLQUFyQyxDQUEyQ08sY0FBY0UsQ0FBZCxFQUFpQkMsT0FBakIsQ0FBeUJDLEtBQXBFLENBRDhCO0FBQUEsT0FBaEM7QUFHRCxLQVJEO0FBVUQsR0F6QkQ7QUEwQkQsQ0ExRUQiLCJmaWxlIjoiQXBwU3BlYy5qcyIsInNvdXJjZXNDb250ZW50IjpbImRlc2NyaWJlKCdBcHAnLCBmdW5jdGlvbigpIHtcbiAgdmFyIHtcbiAgICBTaW11bGF0ZSxcbiAgICByZW5kZXJJbnRvRG9jdW1lbnQsXG4gICAgZmluZFJlbmRlcmVkRE9NQ29tcG9uZW50V2l0aENsYXNzLFxuICAgIHNjcnlSZW5kZXJlZERPTUNvbXBvbmVudHNXaXRoQ2xhc3NcbiAgfSA9IFJlYWN0LmFkZG9ucy5UZXN0VXRpbHM7XG5cbiAgdmFyIGFwcDtcblxuICBiZWZvcmVFYWNoKGZ1bmN0aW9uKCkge1xuICAgIGFwcCA9IHJlbmRlckludG9Eb2N1bWVudChcbiAgICAgIDxBcHAgc2VhcmNoWW91VHViZT17KCkgPT4ge319Lz5cbiAgICApO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIGJlIGEgc3RhdGVmdWwgY2xhc3MgY29tcG9uZW50JywgZnVuY3Rpb24oKSB7XG4gICAgZXhwZWN0KFJlYWN0LkNvbXBvbmVudC5pc1Byb3RvdHlwZU9mKEFwcCkpLnRvLmJlLnRydWU7XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgcmVuZGVyIGEgc2luZ2xlIFZpZGVvUGxheWVyIGNvbXBvbmVudCcsIGZ1bmN0aW9uKCkge1xuICAgIHZhciB2aWRlb1BsYXllciA9IGZpbmRSZW5kZXJlZERPTUNvbXBvbmVudFdpdGhDbGFzcyhhcHAsICd2aWRlby1wbGF5ZXInKTtcbiAgICBleHBlY3QodmlkZW9QbGF5ZXIpLnRvLmV4aXN0O1xuICB9KTtcblxuICBpdCgnc2hvdWxkIHJlbmRlciBhIHNpbmdsZSBWaWRlb0xpc3QgY29tcG9uZW50JywgZnVuY3Rpb24oKSB7XG4gICAgdmFyIHZpZGVvTGlzdCA9IGZpbmRSZW5kZXJlZERPTUNvbXBvbmVudFdpdGhDbGFzcyhhcHAsICd2aWRlby1saXN0Jyk7XG4gICAgZXhwZWN0KHZpZGVvTGlzdCkudG8uZXhpc3Q7XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgdXBkYXRlIHRoZSB2aWRlbyBwbGF5ZXIgd2hlbiBhIHZpZGVvIGVudHJ5XFwncyB0aXRsZSBpcyBjbGlja2VkJywgZnVuY3Rpb24oKSB7XG4gICAgLy8gVGhpcyB0ZXN0IHdpbGwgb25seSB3b3JrcyBvbmNlIGBBcHBgIGlzIHJlZmFjdG9yZWQgaW50byBhIHN0YXRlZnVsIGNsYXNzIGNvbXBvbmVudFxuICAgIC8vIGJlY2F1c2UgYHJlbmRlckludG9Eb2N1bWVudGAgZG9lcyBub3Qgd29yayB3aXRoIHN0YXRlbGVzcyBjbGFzcyBjb21wb25lbnRzXG4gICAgZXhwZWN0KFJlYWN0LkNvbXBvbmVudC5pc1Byb3RvdHlwZU9mKEFwcCkpLnRvLmJlLnRydWU7XG5cbiAgICB2YXIgdmlkZW9FbnRyeVRpdGxlRWxlbWVudHMgPSBzY3J5UmVuZGVyZWRET01Db21wb25lbnRzV2l0aENsYXNzKGFwcCwgJ3ZpZGVvLWxpc3QtZW50cnktdGl0bGUnKTtcblxuICAgIHZpZGVvRW50cnlUaXRsZUVsZW1lbnRzLmZvckVhY2goKHZpZGVvRW50cnlUaXRsZSkgPT4ge1xuICAgICAgU2ltdWxhdGUuY2xpY2sodmlkZW9FbnRyeVRpdGxlKTtcbiAgICAgIHZhciBwbGF5ZXIgPSBmaW5kUmVuZGVyZWRET01Db21wb25lbnRXaXRoQ2xhc3MoYXBwLCAndmlkZW8tcGxheWVyJyk7XG4gICAgICB2YXIgcGxheWVyVGl0bGUgPSBwbGF5ZXIucXVlcnlTZWxlY3RvcignLnZpZGVvLXBsYXllci1kZXRhaWxzIGgzJyk7XG5cbiAgICAgIC8vIFRoaXMgdGVzdCBhc3N1bWVzIHRoYXQgaWYgeW91IGNhbiBzdWNjZXNzZnVsbHkgdXBkYXRlIHRoZSB2aWRlbyBwbGF5ZXIncyB0aXRsZSxcbiAgICAgIC8vIHlvdSBjYW4gYWxzbyB1cGRhdGUgdGhlIHZpZGVvIGFuZCBkZXNjcmlwdGlvblxuICAgICAgZXhwZWN0KHBsYXllclRpdGxlLmlubmVySFRNTCkudG8uZXF1YWwodmlkZW9FbnRyeVRpdGxlLmlubmVySFRNTCk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIHhkZXNjcmliZSgnd2hlbiByZW5kZXJpbmcgbGl2ZSBkYXRhIGZyb20gWW91VHViZScsIGZ1bmN0aW9uKCkge1xuICAgIHZhciBzZWFyY2hZb3VUdWJlU3R1YjtcblxuICAgIGJlZm9yZUVhY2goZnVuY3Rpb24oKSB7XG4gICAgICBzZWFyY2hZb3VUdWJlU3R1YiA9IHNpbm9uLnN0dWIoKTtcbiAgICAgIHNlYXJjaFlvdVR1YmVTdHViLnlpZWxkcyh3aW5kb3cuZmFrZVZpZGVvRGF0YSk7XG4gICAgICBhcHAgPSByZW5kZXJJbnRvRG9jdW1lbnQoXG4gICAgICAgIDxBcHAgc2VhcmNoWW91VHViZT17c2VhcmNoWW91VHViZVN0dWJ9IC8+XG4gICAgICApO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBjYWxsIGBzZWFyY2hZb3VUdWJlYCB3aGVuIGFwcCBpcyBpbml0aWFsaXplZCcsIGZ1bmN0aW9uKCkge1xuICAgICAgZXhwZWN0KHNlYXJjaFlvdVR1YmVTdHViLmNhbGxlZCkudG8uYmUudHJ1ZTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgbG9hZCBsaXZlIGRhdGEgd2hlbiBhcHAgaXMgaW5pdGlhbGl6ZWQnLCBmdW5jdGlvbigpIHtcbiAgICAgIGV4cGVjdChzZWFyY2hZb3VUdWJlU3R1Yi5jYWxsZWQpLnRvLmJlLnRydWU7XG5cbiAgICAgIHZhciB2aWRlb0VudHJ5VGl0bGVFbGVtZW50cyA9IHNjcnlSZW5kZXJlZERPTUNvbXBvbmVudHNXaXRoQ2xhc3MoYXBwLCAndmlkZW8tbGlzdC1lbnRyeS10aXRsZScpO1xuXG4gICAgICB2aWRlb0VudHJ5VGl0bGVFbGVtZW50cy5mb3JFYWNoKCh2aWRlb0VudHJ5VGl0bGUsIGkpID0+XG4gICAgICAgIGV4cGVjdCh2aWRlb0VudHJ5VGl0bGUuaW5uZXJIVE1MKS50by5lcXVhbChmYWtlVmlkZW9EYXRhW2ldLnNuaXBwZXQudGl0bGUpXG4gICAgICApO1xuICAgIH0pO1xuXG4gIH0pO1xufSk7XG4iXX0=