'use strict';

describe('Search', function () {
  var _React$addons$TestUti = React.addons.TestUtils,
      Simulate = _React$addons$TestUti.Simulate,
      renderIntoDocument = _React$addons$TestUti.renderIntoDocument,
      findRenderedDOMComponentWithClass = _React$addons$TestUti.findRenderedDOMComponentWithClass,
      scryRenderedDOMComponentsWithClass = _React$addons$TestUti.scryRenderedDOMComponentsWithClass;


  var app, searchYouTubeStub;

  xdescribe('when rendering live data from YouTube', function () {
    beforeEach(function () {
      searchYouTubeStub = sinon.stub();
      searchYouTubeStub.onCall(0).yields(window.fakeVideoData);
      searchYouTubeStub.onCall(1).yields(window.moreFakeVideoData);

      app = renderIntoDocument(React.createElement(App, { searchYouTube: searchYouTubeStub }));
    });

    it('should load live data when app is initialized', function () {
      var videoEntryTitleElements = scryRenderedDOMComponentsWithClass(app, 'video-list-entry-title');
      videoEntryTitleElements.forEach(function (videoEntryTitle, i) {
        expect(videoEntryTitle.innerHTML).to.equal(fakeVideoData[i].snippet.title);
      });
    });

    it('should update the video list when typing into the input box', function () {
      var videoEntryTitleElements = scryRenderedDOMComponentsWithClass(app, 'video-list-entry-title');
      videoEntryTitleElements.forEach(function (videoEntryTitle, i) {
        expect(videoEntryTitle.innerHTML).to.equal(fakeVideoData[i].snippet.title);
      });

      var searchInputElement = findRenderedDOMComponentWithClass(app, 'form-control');
      Simulate.change(searchInputElement, { target: { value: 'React tutorial' } });

      var newVideoEntryTitleElements = scryRenderedDOMComponentsWithClass(app, 'video-list-entry-title');
      newVideoEntryTitleElements.forEach(function (videoEntryTitle, i) {
        expect(videoEntryTitle.innerHTML).to.equal(moreFakeVideoData[i].snippet.title);
      });
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NwZWMvY29tcG9uZW50cy9TZWFyY2hTcGVjLmpzeCJdLCJuYW1lcyI6WyJkZXNjcmliZSIsIlJlYWN0IiwiYWRkb25zIiwiVGVzdFV0aWxzIiwiU2ltdWxhdGUiLCJyZW5kZXJJbnRvRG9jdW1lbnQiLCJmaW5kUmVuZGVyZWRET01Db21wb25lbnRXaXRoQ2xhc3MiLCJzY3J5UmVuZGVyZWRET01Db21wb25lbnRzV2l0aENsYXNzIiwiYXBwIiwic2VhcmNoWW91VHViZVN0dWIiLCJ4ZGVzY3JpYmUiLCJiZWZvcmVFYWNoIiwic2lub24iLCJzdHViIiwib25DYWxsIiwieWllbGRzIiwid2luZG93IiwiZmFrZVZpZGVvRGF0YSIsIm1vcmVGYWtlVmlkZW9EYXRhIiwiaXQiLCJ2aWRlb0VudHJ5VGl0bGVFbGVtZW50cyIsImZvckVhY2giLCJ2aWRlb0VudHJ5VGl0bGUiLCJpIiwiZXhwZWN0IiwiaW5uZXJIVE1MIiwidG8iLCJlcXVhbCIsInNuaXBwZXQiLCJ0aXRsZSIsInNlYXJjaElucHV0RWxlbWVudCIsImNoYW5nZSIsInRhcmdldCIsInZhbHVlIiwibmV3VmlkZW9FbnRyeVRpdGxlRWxlbWVudHMiXSwibWFwcGluZ3MiOiI7O0FBQUFBLFNBQVUsUUFBVixFQUFvQixZQUFXO0FBQUEsOEJBTXpCQyxNQUFNQyxNQUFOLENBQWFDLFNBTlk7QUFBQSxNQUUzQkMsUUFGMkIseUJBRTNCQSxRQUYyQjtBQUFBLE1BRzNCQyxrQkFIMkIseUJBRzNCQSxrQkFIMkI7QUFBQSxNQUkzQkMsaUNBSjJCLHlCQUkzQkEsaUNBSjJCO0FBQUEsTUFLM0JDLGtDQUwyQix5QkFLM0JBLGtDQUwyQjs7O0FBUTdCLE1BQUlDLEdBQUosRUFBU0MsaUJBQVQ7O0FBRUFDLFlBQVUsdUNBQVYsRUFBbUQsWUFBVztBQUM1REMsZUFBVyxZQUFXO0FBQ3BCRiwwQkFBb0JHLE1BQU1DLElBQU4sRUFBcEI7QUFDQUosd0JBQWtCSyxNQUFsQixDQUF5QixDQUF6QixFQUE0QkMsTUFBNUIsQ0FBbUNDLE9BQU9DLGFBQTFDO0FBQ0FSLHdCQUFrQkssTUFBbEIsQ0FBeUIsQ0FBekIsRUFBNEJDLE1BQTVCLENBQW1DQyxPQUFPRSxpQkFBMUM7O0FBRUFWLFlBQU1ILG1CQUNKLG9CQUFDLEdBQUQsSUFBSyxlQUFlSSxpQkFBcEIsR0FESSxDQUFOO0FBR0QsS0FSRDs7QUFVQVUsT0FBRywrQ0FBSCxFQUFvRCxZQUFXO0FBQzdELFVBQUlDLDBCQUEwQmIsbUNBQW1DQyxHQUFuQyxFQUF3Qyx3QkFBeEMsQ0FBOUI7QUFDQVksOEJBQXdCQyxPQUF4QixDQUFnQyxVQUFDQyxlQUFELEVBQWtCQyxDQUFsQixFQUF3QjtBQUN0REMsZUFBT0YsZ0JBQWdCRyxTQUF2QixFQUFrQ0MsRUFBbEMsQ0FBcUNDLEtBQXJDLENBQTJDVixjQUFjTSxDQUFkLEVBQWlCSyxPQUFqQixDQUF5QkMsS0FBcEU7QUFDRCxPQUZEO0FBR0QsS0FMRDs7QUFPQVYsT0FBRyw2REFBSCxFQUFrRSxZQUFXO0FBQzNFLFVBQUlDLDBCQUEwQmIsbUNBQW1DQyxHQUFuQyxFQUF3Qyx3QkFBeEMsQ0FBOUI7QUFDQVksOEJBQXdCQyxPQUF4QixDQUFnQyxVQUFDQyxlQUFELEVBQWtCQyxDQUFsQixFQUF3QjtBQUN0REMsZUFBT0YsZ0JBQWdCRyxTQUF2QixFQUFrQ0MsRUFBbEMsQ0FBcUNDLEtBQXJDLENBQTJDVixjQUFjTSxDQUFkLEVBQWlCSyxPQUFqQixDQUF5QkMsS0FBcEU7QUFDRCxPQUZEOztBQUlBLFVBQUlDLHFCQUFxQnhCLGtDQUFrQ0UsR0FBbEMsRUFBdUMsY0FBdkMsQ0FBekI7QUFDQUosZUFBUzJCLE1BQVQsQ0FBZ0JELGtCQUFoQixFQUFvQyxFQUFDRSxRQUFRLEVBQUNDLE9BQU8sZ0JBQVIsRUFBVCxFQUFwQzs7QUFFQSxVQUFJQyw2QkFBNkIzQixtQ0FBbUNDLEdBQW5DLEVBQXdDLHdCQUF4QyxDQUFqQztBQUNBMEIsaUNBQTJCYixPQUEzQixDQUFtQyxVQUFDQyxlQUFELEVBQWtCQyxDQUFsQixFQUF3QjtBQUN6REMsZUFBT0YsZ0JBQWdCRyxTQUF2QixFQUFrQ0MsRUFBbEMsQ0FBcUNDLEtBQXJDLENBQTJDVCxrQkFBa0JLLENBQWxCLEVBQXFCSyxPQUFyQixDQUE2QkMsS0FBeEU7QUFDRCxPQUZEO0FBR0QsS0FiRDtBQWNELEdBaENEO0FBaUNELENBM0NEIiwiZmlsZSI6IlNlYXJjaFNwZWMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJkZXNjcmliZSAoJ1NlYXJjaCcsIGZ1bmN0aW9uKCkge1xuICB2YXIge1xuICAgIFNpbXVsYXRlLFxuICAgIHJlbmRlckludG9Eb2N1bWVudCxcbiAgICBmaW5kUmVuZGVyZWRET01Db21wb25lbnRXaXRoQ2xhc3MsXG4gICAgc2NyeVJlbmRlcmVkRE9NQ29tcG9uZW50c1dpdGhDbGFzc1xuICB9ID0gUmVhY3QuYWRkb25zLlRlc3RVdGlscztcblxuICB2YXIgYXBwLCBzZWFyY2hZb3VUdWJlU3R1YjtcbiAgXG4gIHhkZXNjcmliZSgnd2hlbiByZW5kZXJpbmcgbGl2ZSBkYXRhIGZyb20gWW91VHViZScsIGZ1bmN0aW9uKCkge1xuICAgIGJlZm9yZUVhY2goZnVuY3Rpb24oKSB7XG4gICAgICBzZWFyY2hZb3VUdWJlU3R1YiA9IHNpbm9uLnN0dWIoKTtcbiAgICAgIHNlYXJjaFlvdVR1YmVTdHViLm9uQ2FsbCgwKS55aWVsZHMod2luZG93LmZha2VWaWRlb0RhdGEpO1xuICAgICAgc2VhcmNoWW91VHViZVN0dWIub25DYWxsKDEpLnlpZWxkcyh3aW5kb3cubW9yZUZha2VWaWRlb0RhdGEpO1xuXG4gICAgICBhcHAgPSByZW5kZXJJbnRvRG9jdW1lbnQoXG4gICAgICAgIDxBcHAgc2VhcmNoWW91VHViZT17c2VhcmNoWW91VHViZVN0dWJ9IC8+XG4gICAgICApO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBsb2FkIGxpdmUgZGF0YSB3aGVuIGFwcCBpcyBpbml0aWFsaXplZCcsIGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHZpZGVvRW50cnlUaXRsZUVsZW1lbnRzID0gc2NyeVJlbmRlcmVkRE9NQ29tcG9uZW50c1dpdGhDbGFzcyhhcHAsICd2aWRlby1saXN0LWVudHJ5LXRpdGxlJyk7XG4gICAgICB2aWRlb0VudHJ5VGl0bGVFbGVtZW50cy5mb3JFYWNoKCh2aWRlb0VudHJ5VGl0bGUsIGkpID0+IHtcbiAgICAgICAgZXhwZWN0KHZpZGVvRW50cnlUaXRsZS5pbm5lckhUTUwpLnRvLmVxdWFsKGZha2VWaWRlb0RhdGFbaV0uc25pcHBldC50aXRsZSk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgICBcbiAgICBpdCgnc2hvdWxkIHVwZGF0ZSB0aGUgdmlkZW8gbGlzdCB3aGVuIHR5cGluZyBpbnRvIHRoZSBpbnB1dCBib3gnLCBmdW5jdGlvbigpIHtcbiAgICAgIHZhciB2aWRlb0VudHJ5VGl0bGVFbGVtZW50cyA9IHNjcnlSZW5kZXJlZERPTUNvbXBvbmVudHNXaXRoQ2xhc3MoYXBwLCAndmlkZW8tbGlzdC1lbnRyeS10aXRsZScpO1xuICAgICAgdmlkZW9FbnRyeVRpdGxlRWxlbWVudHMuZm9yRWFjaCgodmlkZW9FbnRyeVRpdGxlLCBpKSA9PiB7XG4gICAgICAgIGV4cGVjdCh2aWRlb0VudHJ5VGl0bGUuaW5uZXJIVE1MKS50by5lcXVhbChmYWtlVmlkZW9EYXRhW2ldLnNuaXBwZXQudGl0bGUpO1xuICAgICAgfSk7XG5cbiAgICAgIHZhciBzZWFyY2hJbnB1dEVsZW1lbnQgPSBmaW5kUmVuZGVyZWRET01Db21wb25lbnRXaXRoQ2xhc3MoYXBwLCAnZm9ybS1jb250cm9sJyk7XG4gICAgICBTaW11bGF0ZS5jaGFuZ2Uoc2VhcmNoSW5wdXRFbGVtZW50LCB7dGFyZ2V0OiB7dmFsdWU6ICdSZWFjdCB0dXRvcmlhbCd9fSk7XG5cbiAgICAgIHZhciBuZXdWaWRlb0VudHJ5VGl0bGVFbGVtZW50cyA9IHNjcnlSZW5kZXJlZERPTUNvbXBvbmVudHNXaXRoQ2xhc3MoYXBwLCAndmlkZW8tbGlzdC1lbnRyeS10aXRsZScpO1xuICAgICAgbmV3VmlkZW9FbnRyeVRpdGxlRWxlbWVudHMuZm9yRWFjaCgodmlkZW9FbnRyeVRpdGxlLCBpKSA9PiB7XG4gICAgICAgIGV4cGVjdCh2aWRlb0VudHJ5VGl0bGUuaW5uZXJIVE1MKS50by5lcXVhbChtb3JlRmFrZVZpZGVvRGF0YVtpXS5zbmlwcGV0LnRpdGxlKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9KTtcbn0pO1xuIl19