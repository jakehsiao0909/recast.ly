'use strict';

describe('VideoPlayer', function () {
  var _React$addons$TestUti = React.addons.TestUtils,
      renderIntoDocument = _React$addons$TestUti.renderIntoDocument,
      findRenderedDOMComponentWithClass = _React$addons$TestUti.findRenderedDOMComponentWithClass;


  var cuteCatVideo, superCuteCatVideo, hackReactorVideo;

  // In order to leverage React's test utility function `findRenderedDOMComponentWithClass`
  // for stateless functional components, we must wrap them in a class component
  // Wrapper.jsx defined a Wrapper component to use in our tests
  // Read more here: https://github.com/facebook/react/issues/4972

  beforeEach(function () {
    cuteCatVideo = renderIntoDocument(React.createElement(
      Wrapper,
      null,
      React.createElement(VideoPlayer, { videos: window.fakeVideoData[0] })
    ));

    superCuteCatVideo = renderIntoDocument(React.createElement(
      Wrapper,
      null,
      React.createElement(VideoPlayer, { videos: window.fakeVideoData[1] })
    ));

    hackReactorVideo = renderIntoDocument(React.createElement(
      Wrapper,
      null,
      React.createElement(VideoPlayer, { videos: window.fakeVideoData[2] })
    ));
  });

  it('should be a stateless functional component', function () {
    expect(React.Component.isPrototypeOf(VideoPlayer)).to.be.false;
  });

  it('should dynamically render a video', function () {
    var cuteCatVideoIFrameElement = findRenderedDOMComponentWithClass(cuteCatVideo, 'embed-responsive-item');
    var superCuteCatVideoIFrameElement = findRenderedDOMComponentWithClass(superCuteCatVideo, 'embed-responsive-item');
    var hackReactorVideoIFrameElement = findRenderedDOMComponentWithClass(hackReactorVideo, 'embed-responsive-item');

    expect(cuteCatVideoIFrameElement.src).to.equal('https://www.youtube.com/embed/000001');
    expect(superCuteCatVideoIFrameElement.src).to.equal('https://www.youtube.com/embed/000002');
    expect(hackReactorVideoIFrameElement.src).to.equal('https://www.youtube.com/embed/000003');
  });

  it('should dynamically render a video\'s title', function () {
    var cuteCatVideoTitleElement = findRenderedDOMComponentWithClass(cuteCatVideo, 'video-player-details');
    var superCuteCatVideoTitleElement = findRenderedDOMComponentWithClass(superCuteCatVideo, 'video-player-details');
    var hackReactorVideoTitleElement = findRenderedDOMComponentWithClass(hackReactorVideo, 'video-player-details');

    expect(cuteCatVideoTitleElement.children[0].innerHTML).to.equal('Cute cat video');
    expect(superCuteCatVideoTitleElement.children[0].innerHTML).to.equal('Super cute cat video');
    expect(hackReactorVideoTitleElement.children[0].innerHTML).to.equal('Hack Reactor opens extension school on Mars');
  });

  it('should dynamically render a video\'s description', function () {
    var cuteCatVideoDescriptionElement = findRenderedDOMComponentWithClass(cuteCatVideo, 'video-player-details');
    var superCuteCatVideoDescriptionElement = findRenderedDOMComponentWithClass(superCuteCatVideo, 'video-player-details');
    var hackReactorVideoDescriptionElement = findRenderedDOMComponentWithClass(hackReactorVideo, 'video-player-details');

    expect(cuteCatVideoDescriptionElement.children[1].innerHTML).to.equal('The best cat video on the internet!');
    expect(superCuteCatVideoDescriptionElement.children[1].innerHTML).to.equal('Better than the best cat video on the internet!');
    expect(hackReactorVideoDescriptionElement.children[1].innerHTML).to.equal('Watch the ribbon cutting of the first coding bootcamp in space');
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NwZWMvY29tcG9uZW50cy9WaWRlb1BsYXllclNwZWMuanN4Il0sIm5hbWVzIjpbImRlc2NyaWJlIiwiUmVhY3QiLCJhZGRvbnMiLCJUZXN0VXRpbHMiLCJyZW5kZXJJbnRvRG9jdW1lbnQiLCJmaW5kUmVuZGVyZWRET01Db21wb25lbnRXaXRoQ2xhc3MiLCJjdXRlQ2F0VmlkZW8iLCJzdXBlckN1dGVDYXRWaWRlbyIsImhhY2tSZWFjdG9yVmlkZW8iLCJiZWZvcmVFYWNoIiwid2luZG93IiwiZmFrZVZpZGVvRGF0YSIsIml0IiwiZXhwZWN0IiwiQ29tcG9uZW50IiwiaXNQcm90b3R5cGVPZiIsIlZpZGVvUGxheWVyIiwidG8iLCJiZSIsImZhbHNlIiwiY3V0ZUNhdFZpZGVvSUZyYW1lRWxlbWVudCIsInN1cGVyQ3V0ZUNhdFZpZGVvSUZyYW1lRWxlbWVudCIsImhhY2tSZWFjdG9yVmlkZW9JRnJhbWVFbGVtZW50Iiwic3JjIiwiZXF1YWwiLCJjdXRlQ2F0VmlkZW9UaXRsZUVsZW1lbnQiLCJzdXBlckN1dGVDYXRWaWRlb1RpdGxlRWxlbWVudCIsImhhY2tSZWFjdG9yVmlkZW9UaXRsZUVsZW1lbnQiLCJjaGlsZHJlbiIsImlubmVySFRNTCIsImN1dGVDYXRWaWRlb0Rlc2NyaXB0aW9uRWxlbWVudCIsInN1cGVyQ3V0ZUNhdFZpZGVvRGVzY3JpcHRpb25FbGVtZW50IiwiaGFja1JlYWN0b3JWaWRlb0Rlc2NyaXB0aW9uRWxlbWVudCJdLCJtYXBwaW5ncyI6Ijs7QUFBQUEsU0FBVSxhQUFWLEVBQXlCLFlBQVc7QUFBQSw4QkFJOUJDLE1BQU1DLE1BQU4sQ0FBYUMsU0FKaUI7QUFBQSxNQUVoQ0Msa0JBRmdDLHlCQUVoQ0Esa0JBRmdDO0FBQUEsTUFHaENDLGlDQUhnQyx5QkFHaENBLGlDQUhnQzs7O0FBTWxDLE1BQUlDLFlBQUosRUFBa0JDLGlCQUFsQixFQUFxQ0MsZ0JBQXJDOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBQyxhQUFXLFlB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QUEwRSxnRUFBMUU7QUFDRCxHQVJEO0FBU0QsQ0FsRUQiLCJmaWxlIjoiVmlkZW9QbGF5ZXJTcGVjLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZGVzY3JpYmUgKCdWaWRlb1BsYXllcicsIGZ1bmN0aW9uKCkge1xuICB2YXIge1xuICAgIHJlbmRlckludG9Eb2N1bWVudCxcbiAgICBmaW5kUmVuZGVyZWRET01Db21wb25lbnRXaXRoQ2xhc3NcbiAgfSA9IFJlYWN0LmFkZG9ucy5UZXN0VXRpbHM7XG4gIFxuICB2YXIgY3V0ZUNhdFZpZGVvLCBzdXBlckN1dGVDYXRWaWRlbywgaGFja1JlYWN0b3JWaWRlbztcblxuICAvLyBJbiBvcmRlciB0byBsZXZlcmFnZSBSZWFjdCdzIHRlc3QgdXRpbGl0eSBmdW5jdGlvbiBgZmluZFJlbmRlcmVkRE9NQ29tcG9uZW50V2l0aENsYXNzYFxuICAvLyBmb3Igc3RhdGVsZXNzIGZ1bmN0aW9uYWwgY29tcG9uZW50cywgd2UgbXVzdCB3cmFwIHRoZW0gaW4gYSBjbGFzcyBjb21wb25lbnRcbiAgLy8gV3JhcHBlci5qc3ggZGVmaW5lZCBhIFdyYXBwZXIgY29tcG9uZW50IHRvIHVzZSBpbiBvdXIgdGVzdHNcbiAgLy8gUmVhZCBtb3JlIGhlcmU6IGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC9pc3N1ZXMvNDk3MlxuXG4gIGJlZm9yZUVhY2goZnVuY3Rpb24oKSB7XG4gICAgY3V0ZUNhdFZpZGVvID0gcmVuZGVySW50b0RvY3VtZW50KFxuICAgICAgPFdyYXBwZXI+XG4gICAgICAgIDxWaWRlb1BsYXllciB2aWRlb3M9e3dpbmRvdy5mYWtlVmlkZW9EYXRhWzBdfSAvPlxuICAgICAgPC9XcmFwcGVyPlxuICAgICk7XG5cbiAgICBzdXBlckN1dGVDYXRWaWRlbyA9IHJlbmRlckludG9Eb2N1bWVudChcbiAgICAgIDxXcmFwcGVyPlxuICAgICAgICA8VmlkZW9QbGF5ZXIgdmlkZW9zPXt3aW5kb3cuZmFrZVZpZGVvRGF0YVsxXX0gLz5cbiAgICAgIDwvV3JhcHBlcj5cbiAgICApO1xuXG4gICAgaGFja1JlYWN0b3JWaWRlbyA9IHJlbmRlckludG9Eb2N1bWVudChcbiAgICAgIDxXcmFwcGVyPlxuICAgICAgICA8VmlkZW9QbGF5ZXIgdmlkZW9zPXt3aW5kb3cuZmFrZVZpZGVvRGF0YVsyXX0gLz5cbiAgICAgIDwvV3JhcHBlcj5cbiAgICApO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIGJlIGEgc3RhdGVsZXNzIGZ1bmN0aW9uYWwgY29tcG9uZW50JywgZnVuY3Rpb24oKSB7XG4gICAgZXhwZWN0KFJlYWN0LkNvbXBvbmVudC5pc1Byb3RvdHlwZU9mKFZpZGVvUGxheWVyKSkudG8uYmUuZmFsc2U7XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgZHluYW1pY2FsbHkgcmVuZGVyIGEgdmlkZW8nLCBmdW5jdGlvbigpIHtcbiAgICB2YXIgY3V0ZUNhdFZpZGVvSUZyYW1lRWxlbWVudCA9IGZpbmRSZW5kZXJlZERPTUNvbXBvbmVudFdpdGhDbGFzcyhjdXRlQ2F0VmlkZW8sICdlbWJlZC1yZXNwb25zaXZlLWl0ZW0nKTtcbiAgICB2YXIgc3VwZXJDdXRlQ2F0VmlkZW9JRnJhbWVFbGVtZW50ID0gZmluZFJlbmRlcmVkRE9NQ29tcG9uZW50V2l0aENsYXNzKHN1cGVyQ3V0ZUNhdFZpZGVvLCAnZW1iZWQtcmVzcG9uc2l2ZS1pdGVtJyk7XG4gICAgdmFyIGhhY2tSZWFjdG9yVmlkZW9JRnJhbWVFbGVtZW50ID0gZmluZFJlbmRlcmVkRE9NQ29tcG9uZW50V2l0aENsYXNzKGhhY2tSZWFjdG9yVmlkZW8sICdlbWJlZC1yZXNwb25zaXZlLWl0ZW0nKTtcblxuICAgIGV4cGVjdChjdXRlQ2F0VmlkZW9JRnJhbWVFbGVtZW50LnNyYykudG8uZXF1YWwoJ2h0dHBzOi8vd3d3LnlvdXR1YmUuY29tL2VtYmVkLzAwMDAwMScpO1xuICAgIGV4cGVjdChzdXBlckN1dGVDYXRWaWRlb0lGcmFtZUVsZW1lbnQuc3JjKS50by5lcXVhbCgnaHR0cHM6Ly93d3cueW91dHViZS5jb20vZW1iZWQvMDAwMDAyJyk7XG4gICAgZXhwZWN0KGhhY2tSZWFjdG9yVmlkZW9JRnJhbWVFbGVtZW50LnNyYykudG8uZXF1YWwoJ2h0dHBzOi8vd3d3LnlvdXR1YmUuY29tL2VtYmVkLzAwMDAwMycpO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIGR5bmFtaWNhbGx5IHJlbmRlciBhIHZpZGVvXFwncyB0aXRsZScsIGZ1bmN0aW9uKCkge1xuICAgIHZhciBjdXRlQ2F0VmlkZW9UaXRsZUVsZW1lbnQgPSBmaW5kUmVuZGVyZWRET01Db21wb25lbnRXaXRoQ2xhc3MoY3V0ZUNhdFZpZGVvLCAndmlkZW8tcGxheWVyLWRldGFpbHMnKTtcbiAgICB2YXIgc3VwZXJDdXRlQ2F0VmlkZW9UaXRsZUVsZW1lbnQgPSBmaW5kUmVuZGVyZWRET01Db21wb25lbnRXaXRoQ2xhc3Moc3VwZXJDdXRlQ2F0VmlkZW8sICd2aWRlby1wbGF5ZXItZGV0YWlscycpO1xuICAgIHZhciBoYWNrUmVhY3RvclZpZGVvVGl0bGVFbGVtZW50ID0gZmluZFJlbmRlcmVkRE9NQ29tcG9uZW50V2l0aENsYXNzKGhhY2tSZWFjdG9yVmlkZW8sICd2aWRlby1wbGF5ZXItZGV0YWlscycpO1xuXG4gICAgZXhwZWN0KGN1dGVDYXRWaWRlb1RpdGxlRWxlbWVudC5jaGlsZHJlblswXS5pbm5lckhUTUwpLnRvLmVxdWFsKCdDdXRlIGNhdCB2aWRlbycpO1xuICAgIGV4cGVjdChzdXBlckN1dGVDYXRWaWRlb1RpdGxlRWxlbWVudC5jaGlsZHJlblswXS5pbm5lckhUTUwpLnRvLmVxdWFsKCdTdXBlciBjdXRlIGNhdCB2aWRlbycpO1xuICAgIGV4cGVjdChoYWNrUmVhY3RvclZpZGVvVGl0bGVFbGVtZW50LmNoaWxkcmVuWzBdLmlubmVySFRNTCkudG8uZXF1YWwoJ0hhY2sgUmVhY3RvciBvcGVucyBleHRlbnNpb24gc2Nob29sIG9uIE1hcnMnKTtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCBkeW5hbWljYWxseSByZW5kZXIgYSB2aWRlb1xcJ3MgZGVzY3JpcHRpb24nLCBmdW5jdGlvbigpIHtcbiAgICB2YXIgY3V0ZUNhdFZpZGVvRGVzY3JpcHRpb25FbGVtZW50ID0gZmluZFJlbmRlcmVkRE9NQ29tcG9uZW50V2l0aENsYXNzKGN1dGVDYXRWaWRlbywgJ3ZpZGVvLXBsYXllci1kZXRhaWxzJyk7XG4gICAgdmFyIHN1cGVyQ3V0ZUNhdFZpZGVvRGVzY3JpcHRpb25FbGVtZW50ID0gZmluZFJlbmRlcmVkRE9NQ29tcG9uZW50V2l0aENsYXNzKHN1cGVyQ3V0ZUNhdFZpZGVvLCAndmlkZW8tcGxheWVyLWRldGFpbHMnKTtcbiAgICB2YXIgaGFja1JlYWN0b3JWaWRlb0Rlc2NyaXB0aW9uRWxlbWVudCA9IGZpbmRSZW5kZXJlZERPTUNvbXBvbmVudFdpdGhDbGFzcyhoYWNrUmVhY3RvclZpZGVvLCAndmlkZW8tcGxheWVyLWRldGFpbHMnKTtcblxuICAgIGV4cGVjdChjdXRlQ2F0VmlkZW9EZXNjcmlwdGlvbkVsZW1lbnQuY2hpbGRyZW5bMV0uaW5uZXJIVE1MKS50by5lcXVhbCgnVGhlIGJlc3QgY2F0IHZpZGVvIG9uIHRoZSBpbnRlcm5ldCEnKTtcbiAgICBleHBlY3Qoc3VwZXJDdXRlQ2F0VmlkZW9EZXNjcmlwdGlvbkVsZW1lbnQuY2hpbGRyZW5bMV0uaW5uZXJIVE1MKS50by5lcXVhbCgnQmV0dGVyIHRoYW4gdGhlIGJlc3QgY2F0IHZpZGVvIG9uIHRoZSBpbnRlcm5ldCEnKTtcbiAgICBleHBlY3QoaGFja1JlYWN0b3JWaWRlb0Rlc2NyaXB0aW9uRWxlbWVudC5jaGlsZHJlblsxXS5pbm5lckhUTUwpLnRvLmVxdWFsKCdXYXRjaCB0aGUgcmliYm9uIGN1dHRpbmcgb2YgdGhlIGZpcnN0IGNvZGluZyBib290Y2FtcCBpbiBzcGFjZScpO1xuICB9KTtcbn0pOyJdfQ==